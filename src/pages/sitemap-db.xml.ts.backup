import type { APIRoute } from 'astro';
import { localdb as db } from "@/database/localdb";
import { table_works, table_authors, table_dynasties, table_collections } from "@/database/schema_sqlite";

const siteUrl = 'https://eternalinkpoems.com';

export const GET: APIRoute = async () => {
  try {
    console.log('Starting sitemap generation...');
    
    // Use Promise.all to fetch data concurrently for better performance
    const [works, authors, dynasties, collections] = await Promise.all([
      db.select({ id: table_works.id, quotes_count: table_works.quotes_count }).from(table_works),
      db.select({ id: table_authors.id }).from(table_authors),
      db.select({ name: table_dynasties.name }).from(table_dynasties),
      db.select({ id: table_collections.id }).from(table_collections)
    ]);
    
    console.log(`Found ${works.length} works, ${authors.length} authors, ${dynasties.length} dynasties, ${collections.length} collections`);
    
    // 生成XML文件
    const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- 静态页面 -->
  <url>
    <loc>${siteUrl}</loc>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>${siteUrl}/about</loc>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>${siteUrl}/info</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>
  
  <!-- 作品页面 -->
  ${works.map(work => `
  <url>
    <loc>${siteUrl}/works/${work.id}</loc>
    <changefreq>monthly</changefreq>
    <priority>${work.quotes_count && work.quotes_count > 0 ? '0.8' : '0.6'}</priority>
  </url>`).join('')}
  
  <!-- 作者页面 -->
  ${authors.map(author => `
  <url>
    <loc>${siteUrl}/authors/${author.id}</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>`).join('')}
  
  <!-- 朝代页面 -->
  ${dynasties.map(dynasty => `
  <url>
    <loc>${siteUrl}/dynasties/${encodeURIComponent(dynasty.name)}</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>`).join('')}
  
  <!-- 集合页面 -->
  ${collections.map(collection => `
  <url>
    <loc>${siteUrl}/collections/${collection.id}</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>`).join('')}
</urlset>`;
    
    console.log('Generating sitemap XML...');
    
    return new Response(sitemap, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'max-age=3600'
      }
    });
  } catch (error) {
    console.error('Error generating sitemap:', error);
    console.error('Error details:', error.message);
    console.error('Stack trace:', error.stack);
    
    // Return a basic sitemap with just static pages if database fails
    const fallbackSitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>${siteUrl}</loc>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>${siteUrl}/about</loc>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>${siteUrl}/info</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>
</urlset>`;
    
    return new Response(fallbackSitemap, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'max-age=300'
      }
    });
  }
}; 