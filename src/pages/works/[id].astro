---
import Base from "@/layouts/Base.astro";
import config from "@/config/config.json";
import { asc, eq } from "drizzle-orm";
import {
  table_collection_works,
  table_works,
  table_quotes,
} from "@/database/schema_sqlite";
import { localdb as db } from "@/database/localdb";
import SubTitle from "@/partials/SubTitle.astro";
import Giscus from "@/components/Giscus.astro";
import StructuredData from "@/components/StructuredData.astro";
import RelatedWorks from "@/components/RelatedWorks.astro";

export const prerender = true;

export async function getStaticPaths() {
  const list = await db.select().from(table_works);
  return list.map((item) => {
    return {
      params: { id: item.id },
    };
  });
}

const { id } = Astro.params;

const work = (
  await db.select().from(table_works).where(eq(table_works.id, id))
)[0];
// console.log(work);

const author_id = work.author_id;
const author_name = work.author;

const collections = await db
  .select()
  .from(table_collection_works)
  .where(eq(table_collection_works.work_id, id))
  .orderBy(asc(table_collection_works.show_order));

const quotes = await db
  .select()
  .from(table_quotes)
  .where(eq(table_quotes.work_id, id));

// 优化SEO元数据 - 确保标题在40-60字符之间
const title = work.title;
const meta_title = `《${work.title}》全文及賞析 - ${author_name}${work.dynasty ? ` ${work.dynasty}` : ''}名作 | ${config.site.title}`;
// 优化描述，包含关键词，控制在140-160字符之间
const description = work.content 
  ? `阅读《${work.title}》全文、翻译及详细赏析，了解${author_name}创作这部${work.dynasty}经典作品的历史背景和文学价值。包含注释、翻译和名句赏析，感受${work.dynasty}文学的独特魅力。`
  : `《${work.title}》- ${author_name}的经典${work.dynasty}作品，包含原文、翻译及详细赏析。探索这部作品的文学价值和历史意义，领略中国古典文学的瑰丽风采。`;
const canonical = config.site.base_url + `/works/${id}`;

// 准备结构化数据
const poemData = {
  title: work.title,
  author: author_name,
  authorId: author_id,
  dynasty: work.dynasty,
  content: work.content,
  year: "", // 如果有年份数据，可以在这里添加
  genre: "", // 作品类型，如诗、词、赋等
  siteUrl: config.site.base_url,
  url: canonical
};

// 获取hideComments配置
const hideComments = config.settings.hideComments || false;
---

<Base meta_title={meta_title} description={description} canonical={canonical}>
  <!-- 添加结构化数据 -->
  <StructuredData type="Poem" data={poemData} />
  
  <!-- 生成面包屑导航结构化数据 -->
  <StructuredData 
    type="BreadcrumbList" 
    data={[
      { position: 1, name: "首页", item: config.site.base_url },
      { position: 2, name: work.dynasty, item: `${config.site.base_url}/dynasties/${work.dynasty}` },
      { position: 3, name: author_name, item: `${config.site.base_url}/authors/${author_id}` },
      { position: 4, name: work.title, item: canonical }
    ]} 
  />
  
  <!-- <PageHeader title={title} /> -->
  <section class="section px-4 pt-0 pb-0 mb-14 mx-auto">
    <div class="container">
      <!-- 作品內容 -->
      <div class="mx-auto flex flex-col">
        <div class="mt-14">
          <h1 class="text-2xl text-center">{work.title}</h1>

          <div class="flex flex-col items-center gap-2 mt-4">
            <!-- 语音控制区域 -->
            <div class="inline-flex items-center gap-2">
              <div class="relative">
                <button
                  id="voiceMenuButton"
                  class="flex items-center p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
                  title="选择语音"
                >
                  <!-- 人声图标 -->
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/>
                    <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
                    <line x1="12" y1="19" x2="12" y2="23"/>
                    <line x1="8" y1="23" x2="16" y2="23"/>
                  </svg>
                </button>
                <!-- 语音选项菜单 - 修改定位和样式 -->
                <div
                  id="voiceMenu"
                  class="fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 
                  w-[280px] py-1 rounded-lg border bg-white dark:bg-gray-800 
                  border-gray-200 dark:border-gray-600 shadow-lg hidden z-50
                  md:absolute md:left-0 md:top-full md:translate-x-0 md:translate-y-0"
                >
                  <div class="max-h-[300px] overflow-y-auto" id="voiceList">
                    <!-- 选项将由 JS 动态填充 -->
                  </div>
                </div>
              </div>
              <button
                id="speakButton"
                class="flex items-center p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
                title="朗读"
              >
                <!-- 喇叭图标 - 默认状态 -->
                <svg id="speakerIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                  <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                  <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
                </svg>
                <!-- 停止图标 - 播放时显示 -->
                <svg id="stopIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hidden">
                  <circle cx="12" cy="12" r="10"></circle>
                  <rect x="9" y="9" width="6" height="6" fill="currentColor"></rect>
                </svg>
              </button>
            </div>

            <!-- 作者和朝代信息 -->
            <div class="flex items-center gap-2">
              <a
                href={`/dynasties/${work.dynasty}`}
                class="animated-underline p-1 text-gray-500 dark:text-gray-300"
              >[{work.dynasty}]</a>
              <a
                href={`/authors/${author_id}`}
                class="animated-underline p-1 text-gray-500 dark:text-gray-300"
              >{author_name}</a>
            </div>
          </div>

          <!-- 添加遮罩层 -->
          <div id="voiceMenuOverlay" class="fixed inset-0 bg-black/50 hidden z-40"></div>

          <!-- 居中佈局 -->
          {
            work.layout == "center" && (
              <div class="flex justify-center">
                <pre
                  class="whitespace-pre-wrap leading-loose 
                  text-dark dark:text-darkmode-dark"
                >{work.content}
                </pre>
              </div>
            )
          }

          <!-- 段落佈局，暫時和居中佈局效果一樣 -->
          {
            work.layout == "indent" && (
              <div class="flex justify-center">
                <pre
                  class="whitespace-pre-wrap leading-loose 
                      text-dark dark:text-darkmode-dark"
                >{work.content}
                </pre>
              </div>
            )
          }

        </div>
      </div>

      <div class="flex flex-col gap-4 md:flex-row md:gap-20">
        <div class="md:flex-1">
          <!-- 詩集列表 -->
          {
            collections.length ? (
              <>
                <SubTitle title="詩集" description="" />
                <div class="flex flex-wrap gap-y-1 gap-x-2">
                  {collections.map((collection) => (
                    // bg-gray-100 dark:bg-gray-800
                    <a
                      href={`/collections/${collection.collection_id}`}
                      class="animated-underline p-1"
                    >
                      # {collection.collection}
                    </a>
                  ))}
                </div>
              </>
            ) : (
              <div>
                <SubTitle title="詩集" description="" />
                <p>暫無內容</p>
              </div>
            )
          }
          <!-- 作品註解 -->
          {
            work.annotation ? (
              <>
                <SubTitle title="註解" description="" />
                <div class="flex justify-start">
                  <pre class="whitespace-pre-wrap">{work.annotation}</pre>
                </div>
              </>
            ) : (
              <div>
                <SubTitle title="註解" description="" />
                <p>暫無內容</p>
              </div>
            )
          }
          <!-- 作品簡介 -->
          {
            work.intro ? (
              <>
                <SubTitle title="簡介" description="" />
                <div class="flex justify-start">
                  <pre class="whitespace-pre-wrap">{work.intro}</pre>
                </div>
              </>
            ) : (
              <div>
                <SubTitle title="簡介" description="" />
                <p>暫無內容</p>
              </div>
            )
          }
        </div>

        <div class="md:flex-1">
          <!-- 佳句列表 -->
          {
            quotes.length > 0 ? (
              <>
                <SubTitle title="佳句" description="" />
                <ul>
                  {quotes.map((quote) => (
                    // bg-gray-100 dark:bg-gray-800
                    <li class="p-1">{quote.quote}</li>
                  ))}
                </ul>
              </>
            ) : (
              <div>
                <SubTitle title="佳句" description="" />
                <p>暫無內容</p>
              </div>
            )
          }
          <!-- 作品翻譯 -->
          {
            work.translation != null && work.translation ? (
              <>
                <SubTitle title="翻譯" description="" />
                <div class="flex justify-start">
                  <pre class="whitespace-pre-wrap">{work.translation}</pre>
                </div>
              </>
            ) : (
              <div>
                <SubTitle title="翻譯" description="" />
                <p>暫無內容</p>
              </div>
            )
          }
          <!-- 作品評價 -->
          {
            work.master_comment != null && work.master_comment ? (
              <>
                <SubTitle title="評價" description="" />
                <div class="flex justify-start">
                  <pre class="whitespace-pre-wrap">{work.master_comment}</pre>
                </div>
              </>
            ) : (
              <div>
                <SubTitle title="評價" description="" />
                <p>暫無內容</p>
              </div>
            )
          }
        </div>
      </div>

      <!-- 相关作品推荐 -->
      <RelatedWorks workId={id} authorId={author_id} dynasty={work.dynasty} />

      <!-- 评论区 -->
      {!hideComments && (
        <>
          <SubTitle title="評論區" />
          <div class="mb-14"></div>
          <Giscus />
        </>
      )}
    </div>
  </section>
</Base>

<script>
  let speechSynth = window.speechSynthesis;
  const voices: SpeechSynthesisVoice[] = [];
  let isPlaying = false;
  let selectedVoiceIndex = 0;
  
  // 获取DOM元素
  const voiceMenuButton = document.getElementById('voiceMenuButton');
  const voiceMenu = document.getElementById('voiceMenu');
  const voiceList = document.getElementById('voiceList');
  const speakButton = document.getElementById('speakButton');
  const speakerIcon = document.getElementById('speakerIcon');
  const stopIcon = document.getElementById('stopIcon');
  const overlay = document.getElementById('voiceMenuOverlay');
  
  // 修改点击事件处理
  document.addEventListener('click', (event) => {
    if (!voiceMenuButton?.contains(event.target as Node) && 
        !voiceMenu?.contains(event.target as Node)) {
      voiceMenu?.classList.add('hidden');
      overlay?.classList.add('hidden');
    }
  });

  // 修改菜单按钮点击事件
  voiceMenuButton?.addEventListener('click', (event) => {
    event.stopPropagation();
    const isHidden = voiceMenu?.classList.contains('hidden');
    
    if (isHidden) {
      voiceMenu?.classList.remove('hidden');
      overlay?.classList.remove('hidden');
    } else {
      voiceMenu?.classList.add('hidden');
      overlay?.classList.add('hidden');
    }
  });

  // 添加遮罩层点击事件
  overlay?.addEventListener('click', () => {
    voiceMenu?.classList.add('hidden');
    overlay?.classList.add('hidden');
  });

  // 修改获取语音列表的逻辑
  function loadVoices(): Promise<SpeechSynthesisVoice[]> {
    // Safari 可能需要延迟加载
    return new Promise((resolve) => {
      let availableVoices = speechSynth.getVoices();
      
      if (availableVoices.length > 0) {
        resolve(availableVoices);
      } else {
        // Safari 需要一个小延迟
        speechSynth.onvoiceschanged = () => {
          availableVoices = speechSynth.getVoices();
          resolve(availableVoices);
        };
      }
    });
  }

  // 修改更新语音列表UI的函数
  async function updateVoiceList() {
    const availableVoices: SpeechSynthesisVoice[] = await loadVoices();
    
    // 清空现有语音列表
    voices.length = 0;
    
    // 打印所有可用语音，用于调试
    console.log('所有可用语音:', availableVoices.map(v => `${v.name} (${v.lang})`));
    
    // 过滤出中文语音，不进行去重，保留所有方言
    availableVoices.forEach((voice: SpeechSynthesisVoice) => {
        if (voice.lang.includes('zh')) {
            voices.push(voice);
        }
    });
    
    // 按照语言代码排序，确保相似语言的语音分组在一起
    voices.sort((a, b) => a.lang.localeCompare(b.lang));
    
    if (!voiceList) return;
    
    // 清空现有选项
    voiceList.innerHTML = '';
    
    // 显示去重后的语音选项
    if (voices.length > 0) {
        voices.forEach((voice, i) => {
            const option = document.createElement('div');
            option.className = `px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 
                ${i === selectedVoiceIndex ? 'bg-gray-100 dark:bg-gray-700' : ''}`;
            // 显示更详细的语音信息，包括语言代码
            option.textContent = `${voice.name} (${voice.lang})`;
            // 添加数据属性以方便调试
            option.setAttribute('data-voice-lang', voice.lang);
            option.setAttribute('data-voice-name', voice.name);
            option.addEventListener('click', () => {
                selectedVoiceIndex = i;
                console.log(`已选择语音: ${voice.name}, 语言: ${voice.lang}, 索引: ${i}`);
                updateVoiceList(); // 刷新选中状态
                closeVoiceMenu();
            });
            voiceList?.appendChild(option);
        });
    } else {
        const message = document.createElement('div');
        message.className = 'px-3 py-2 text-gray-500';
        message.textContent = '未找到中文语音';
        voiceList?.appendChild(message);
    }
  }

  // 初始化语音列表
  updateVoiceList();

  // 修改朗读功能
  speakButton?.addEventListener('click', async () => {
    if (isPlaying) {
      speechSynth.cancel(); // 停止当前播放
      togglePlayState(false);
      return;
    }

    const contentElement = document.querySelector('pre');
    if (!contentElement?.textContent) {
      console.error('未找到朗读内容');
      return;
    }
    
    // 再次确保之前的播放已停止
    speechSynth.cancel();

    const utterance = new SpeechSynthesisUtterance(contentElement.textContent);
    
    // 确保语音列表已加载
    if (voices.length === 0) {
      console.log('语音列表为空，尝试重新加载');
      await updateVoiceList();
      if (voices.length === 0) {
        console.error('无法加载语音列表');
        alert('无法加载语音，请稍后重试或检查浏览器设置。');
        return;
      }
    }
    
    // 获取并设置选中的语音
    const selectedVoice = voices[selectedVoiceIndex];
    if (selectedVoice) {
      // 关键步骤：设置语音对象和语言代码
      utterance.voice = selectedVoice; 
      utterance.lang = selectedVoice.lang; 
      console.log(`尝试使用语音: ${selectedVoice.name} (${selectedVoice.lang}), 索引: ${selectedVoiceIndex}`);
    } else {
      console.warn(`索引 ${selectedVoiceIndex} 处未找到有效语音，将使用默认语音`);
      // 如果找不到选定语音，确保 lang 至少设置为中文
      utterance.lang = 'zh-CN'; 
    }

    // 设置其他参数
    utterance.rate = 1.0;
    utterance.pitch = 1.0;
    utterance.volume = 1.0;
    
    utterance.onstart = () => {
      console.log('开始朗读...');
      togglePlayState(true);
    };
    
    utterance.onend = () => {
      console.log('朗读结束.');
      togglePlayState(false);
    };
    
    utterance.onerror = (event) => {
      console.error('语音合成错误:', event.error, '选择的语音:', utterance.voice?.name, '语言:', utterance.lang);
      togglePlayState(false);
      alert(`语音播放失败: ${event.error}。请尝试切换语音或检查浏览器设置。`);
    };

    // 延迟一小段时间再开始播放，有时有助于解决浏览器问题
    setTimeout(() => {
      console.log('执行 speechSynth.speak');
      speechSynth.speak(utterance);
    }, 100);
  });

  // 切换播放状态和图标
  function togglePlayState(playing: boolean) {
    isPlaying = playing;
    if (playing) {
      speakerIcon?.classList.add('hidden');
      stopIcon?.classList.remove('hidden');
    } else {
      speakerIcon?.classList.remove('hidden');
      stopIcon?.classList.add('hidden');
    }
  }

  // 添加关闭菜单的函数
  function closeVoiceMenu() {
    voiceMenu?.classList.add('hidden');
    overlay?.classList.add('hidden');
  }
</script>

